{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","newInputValue","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","image","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifts","GifExpertApp","props","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qLAmCeA,EAhCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACDC,mBAAS,IADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAgBrC,OACI,sBAAMC,SATO,SAACC,GACdA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACnB,IAAMQ,EAAgBR,EAAES,OAAOH,MAC/BR,EAAcU,S,+BCRTE,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,0FAC6EC,UAAUH,GADvF,sBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAU,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbV,IAAG,UAAEQ,EAAMG,cAAR,aAAE,EAAcC,iBAAiBZ,QATzB,kBAYZM,GAZY,4CAAH,sDCWLO,EATK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACzB,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCsBDO,EAxBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDH,SAACA,GAAc,IAAD,EACbf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAevC,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACpB,IAEGqB,EDZwBK,CAAc1B,GAAjCa,EAFgB,EAErBN,KAAaa,EAFQ,EAERA,QAEpB,OACI,qCACI,mCAAMpB,EAAN,OACA,sBAAKgB,UAAU,YAAf,UACKI,GAAW,yCAERP,EAAOJ,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAESA,GADAA,EAAMC,cEoBpBgB,EAhCM,SAACC,GAClB,IAD4B,EAEQ3C,mBADV,CAAC,gBADC,mBAErB4C,EAFqB,KAET7C,EAFS,KAW5B,OACI,qCACI,8CACA,uBAGA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEQ6C,EAAWpB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEAA,SAAYA,GADLA,YCdhB8B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.b546cc5a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const onChangeValue = (e) => {\n        const newInputValue = e.target.value;\n        setInputValue(newInputValue);\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <input\n            type=\"text\"\n            value={inputValue}\n            onChange={onChangeValue}>\n            </input>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n\nexport default AddCategory\n","export const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=EgG1mUT15b2B4bzReDEZ0HVZcQq5x04z&q=${ encodeURI(category) }&limit=10`; \n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    \n    const gifs = data.map(image => {\n        return {\n            id: image.id,\n            title: image.title,\n            url: image.images?.downsized_medium.url\n        };\n    })\n    return gifs;\n}","import React from 'react'\n\nconst GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"card\">\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifts } from '../hooks/useFetchGifts';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({category}) => {\n\n    const {data:images, loading} = useFetchGifts(category);\n    \n    return (\n        <>\n            <h3> {category} </h3>\n            <div className=\"card-grid\">\n                {loading && <p>Cargando</p>}\n                {\n                    images.map((image) => (\n                    <GifGridItem \n                        key={image.id}\n                        {... image}\n                    />\n                    ))\n                }\n                \n            \n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifts = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            });\n        });\n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = (props) => {\n    const initialCategories = ['Real Madrid'];\n    const [categories, setCategories] = useState(initialCategories);\n\n    // const handleAdd = () => {\n    //     const newCategory = 'Miki Nuñez';\n    //     setCategories([...categories, newCategory]);\n    //     // setCategories((categories) => [...categories, newCategory]);\n    //     /* Si usamos setCategories con callback, se recibe el valor del state que tenía hasta ahora y se devuelve el nuevo estado de la variable */\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <hr/>\n\n            {/* <button onClick={handleAdd} >Agregar</button> */}\n            <AddCategory setCategories={setCategories}/>\n            <ol>\n                {\n                    categories.map((category) => (\n                        <GifGrid \n                        key = {category}\n                        category = {category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// api-key for giphy: EgG1mUT15b2B4bzReDEZ0HVZcQq5x04z"],"sourceRoot":""}